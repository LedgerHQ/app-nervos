// Generated by Molecule 0.5.0

#define MOLECULEC_VERSION 5000
#define MOLECULE_API_VERSION_MIN 5000

#include "molecule_reader_streaming.h"

#ifndef BLOCKCHAIN_H
#define BLOCKCHAIN_H

#ifdef __cplusplus
#define _CPP_BEGIN extern "C" {
#define _CPP_END }
_CPP_BEGIN
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_BLOCKCHAIN
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

/*
 * Reader APIs
 */

struct Uint32_state;
struct Uint32_callbacks;
typedef const struct Uint32_callbacks Uint32_cb;
MOLECULE_API_DECORATOR  void            MolReader_Uint32_init_state                     (void* stack_end, struct Uint32_state *s, const struct Uint32_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Uint32_parse                          (void* stack_end, struct Uint32_state *s, struct mol_chunk *chunk, const struct Uint32_callbacks *cb, mol_num_t size);

struct Uint64_state;
struct Uint64_callbacks;
typedef const struct Uint64_callbacks Uint64_cb;
MOLECULE_API_DECORATOR  void            MolReader_Uint64_init_state                     (void* stack_end, struct Uint64_state *s, const struct Uint64_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Uint64_parse                          (void* stack_end, struct Uint64_state *s, struct mol_chunk *chunk, const struct Uint64_callbacks *cb, mol_num_t size);

struct Uint128_state;
struct Uint128_callbacks;
typedef const struct Uint128_callbacks Uint128_cb;
MOLECULE_API_DECORATOR  void            MolReader_Uint128_init_state                    (void* stack_end, struct Uint128_state *s, const struct Uint128_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Uint128_parse                         (void* stack_end, struct Uint128_state *s, struct mol_chunk *chunk, const struct Uint128_callbacks *cb, mol_num_t size);

struct Byte32_state;
struct Byte32_callbacks;
typedef const struct Byte32_callbacks Byte32_cb;
MOLECULE_API_DECORATOR  void            MolReader_Byte32_init_state                     (void* stack_end, struct Byte32_state *s, const struct Byte32_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Byte32_parse                          (void* stack_end, struct Byte32_state *s, struct mol_chunk *chunk, const struct Byte32_callbacks *cb, mol_num_t size);

struct Uint256_state;
struct Uint256_callbacks;
typedef const struct Uint256_callbacks Uint256_cb;
MOLECULE_API_DECORATOR  void            MolReader_Uint256_init_state                    (void* stack_end, struct Uint256_state *s, const struct Uint256_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Uint256_parse                         (void* stack_end, struct Uint256_state *s, struct mol_chunk *chunk, const struct Uint256_callbacks *cb, mol_num_t size);

struct Bytes_state;
struct Bytes_callbacks;
typedef const struct Bytes_callbacks Bytes_cb;
MOLECULE_API_DECORATOR  void            MolReader_Bytes_init_state                      (void* stack_end, struct Bytes_state *s, const struct Bytes_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Bytes_parse                           (void* stack_end, struct Bytes_state *s, struct mol_chunk *chunk, const struct Bytes_callbacks *cb, mol_num_t size);

struct BytesOpt_state;
struct BytesOpt_callbacks;
typedef const struct BytesOpt_callbacks BytesOpt_cb;
MOLECULE_API_DECORATOR  void            MolReader_BytesOpt_init_state                   (void* stack_end, struct BytesOpt_state *s, const struct BytesOpt_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_BytesOpt_parse                        (void* stack_end, struct BytesOpt_state *s, struct mol_chunk *chunk, const struct BytesOpt_callbacks *cb, mol_num_t size);

struct BytesVec_state;
struct BytesVec_callbacks;
typedef const struct BytesVec_callbacks BytesVec_cb;
MOLECULE_API_DECORATOR  void            MolReader_BytesVec_init_state                   (void* stack_end, struct BytesVec_state *s, const struct BytesVec_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_BytesVec_parse                        (void* stack_end, struct BytesVec_state *s, struct mol_chunk *chunk, const struct BytesVec_callbacks *cb, mol_num_t size);

struct Byte32Vec_state;
struct Byte32Vec_callbacks;
typedef const struct Byte32Vec_callbacks Byte32Vec_cb;
MOLECULE_API_DECORATOR  void            MolReader_Byte32Vec_init_state                  (void* stack_end, struct Byte32Vec_state *s, const struct Byte32Vec_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Byte32Vec_parse                       (void* stack_end, struct Byte32Vec_state *s, struct mol_chunk *chunk, const struct Byte32Vec_callbacks *cb, mol_num_t size);

struct ScriptOpt_state;
struct ScriptOpt_callbacks;
typedef const struct ScriptOpt_callbacks ScriptOpt_cb;
MOLECULE_API_DECORATOR  void            MolReader_ScriptOpt_init_state                  (void* stack_end, struct ScriptOpt_state *s, const struct ScriptOpt_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_ScriptOpt_parse                       (void* stack_end, struct ScriptOpt_state *s, struct mol_chunk *chunk, const struct ScriptOpt_callbacks *cb, mol_num_t size);

struct ProposalShortId_state;
struct ProposalShortId_callbacks;
typedef const struct ProposalShortId_callbacks ProposalShortId_cb;
MOLECULE_API_DECORATOR  void            MolReader_ProposalShortId_init_state            (void* stack_end, struct ProposalShortId_state *s, const struct ProposalShortId_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_ProposalShortId_parse                 (void* stack_end, struct ProposalShortId_state *s, struct mol_chunk *chunk, const struct ProposalShortId_callbacks *cb, mol_num_t size);

struct UncleBlockVec_state;
struct UncleBlockVec_callbacks;
typedef const struct UncleBlockVec_callbacks UncleBlockVec_cb;
MOLECULE_API_DECORATOR  void            MolReader_UncleBlockVec_init_state              (void* stack_end, struct UncleBlockVec_state *s, const struct UncleBlockVec_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_UncleBlockVec_parse                   (void* stack_end, struct UncleBlockVec_state *s, struct mol_chunk *chunk, const struct UncleBlockVec_callbacks *cb, mol_num_t size);

struct TransactionVec_state;
struct TransactionVec_callbacks;
typedef const struct TransactionVec_callbacks TransactionVec_cb;
MOLECULE_API_DECORATOR  void            MolReader_TransactionVec_init_state             (void* stack_end, struct TransactionVec_state *s, const struct TransactionVec_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_TransactionVec_parse                  (void* stack_end, struct TransactionVec_state *s, struct mol_chunk *chunk, const struct TransactionVec_callbacks *cb, mol_num_t size);

struct ProposalShortIdVec_state;
struct ProposalShortIdVec_callbacks;
typedef const struct ProposalShortIdVec_callbacks ProposalShortIdVec_cb;
MOLECULE_API_DECORATOR  void            MolReader_ProposalShortIdVec_init_state         (void* stack_end, struct ProposalShortIdVec_state *s, const struct ProposalShortIdVec_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_ProposalShortIdVec_parse              (void* stack_end, struct ProposalShortIdVec_state *s, struct mol_chunk *chunk, const struct ProposalShortIdVec_callbacks *cb, mol_num_t size);

struct CellDepVec_state;
struct CellDepVec_callbacks;
typedef const struct CellDepVec_callbacks CellDepVec_cb;
MOLECULE_API_DECORATOR  void            MolReader_CellDepVec_init_state                 (void* stack_end, struct CellDepVec_state *s, const struct CellDepVec_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_CellDepVec_parse                      (void* stack_end, struct CellDepVec_state *s, struct mol_chunk *chunk, const struct CellDepVec_callbacks *cb, mol_num_t size);

struct CellInputVec_state;
struct CellInputVec_callbacks;
typedef const struct CellInputVec_callbacks CellInputVec_cb;
MOLECULE_API_DECORATOR  void            MolReader_CellInputVec_init_state               (void* stack_end, struct CellInputVec_state *s, const struct CellInputVec_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_CellInputVec_parse                    (void* stack_end, struct CellInputVec_state *s, struct mol_chunk *chunk, const struct CellInputVec_callbacks *cb, mol_num_t size);

struct CellOutputVec_state;
struct CellOutputVec_callbacks;
typedef const struct CellOutputVec_callbacks CellOutputVec_cb;
MOLECULE_API_DECORATOR  void            MolReader_CellOutputVec_init_state              (void* stack_end, struct CellOutputVec_state *s, const struct CellOutputVec_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_CellOutputVec_parse                   (void* stack_end, struct CellOutputVec_state *s, struct mol_chunk *chunk, const struct CellOutputVec_callbacks *cb, mol_num_t size);

struct Script_state;
struct Script_callbacks;
typedef const struct Script_callbacks Script_cb;
MOLECULE_API_DECORATOR  void            MolReader_Script_init_state                     (void* stack_end, struct Script_state *s, const struct Script_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Script_parse                          (void* stack_end, struct Script_state *s, struct mol_chunk *chunk, const struct Script_callbacks *cb, mol_num_t size);

struct OutPoint_state;
struct OutPoint_callbacks;
typedef const struct OutPoint_callbacks OutPoint_cb;
MOLECULE_API_DECORATOR  void            MolReader_OutPoint_init_state                   (void* stack_end, struct OutPoint_state *s, const struct OutPoint_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_OutPoint_parse                        (void* stack_end, struct OutPoint_state *s, struct mol_chunk *chunk, const struct OutPoint_callbacks *cb, mol_num_t size);

struct CellInput_state;
struct CellInput_callbacks;
typedef const struct CellInput_callbacks CellInput_cb;
MOLECULE_API_DECORATOR  void            MolReader_CellInput_init_state                  (void* stack_end, struct CellInput_state *s, const struct CellInput_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_CellInput_parse                       (void* stack_end, struct CellInput_state *s, struct mol_chunk *chunk, const struct CellInput_callbacks *cb, mol_num_t size);

struct CellOutput_state;
struct CellOutput_callbacks;
typedef const struct CellOutput_callbacks CellOutput_cb;
MOLECULE_API_DECORATOR  void            MolReader_CellOutput_init_state                 (void* stack_end, struct CellOutput_state *s, const struct CellOutput_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_CellOutput_parse                      (void* stack_end, struct CellOutput_state *s, struct mol_chunk *chunk, const struct CellOutput_callbacks *cb, mol_num_t size);

struct CellDep_state;
struct CellDep_callbacks;
typedef const struct CellDep_callbacks CellDep_cb;
MOLECULE_API_DECORATOR  void            MolReader_CellDep_init_state                    (void* stack_end, struct CellDep_state *s, const struct CellDep_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_CellDep_parse                         (void* stack_end, struct CellDep_state *s, struct mol_chunk *chunk, const struct CellDep_callbacks *cb, mol_num_t size);

struct RawTransaction_state;
struct RawTransaction_callbacks;
typedef const struct RawTransaction_callbacks RawTransaction_cb;
MOLECULE_API_DECORATOR  void            MolReader_RawTransaction_init_state             (void* stack_end, struct RawTransaction_state *s, const struct RawTransaction_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_RawTransaction_parse                  (void* stack_end, struct RawTransaction_state *s, struct mol_chunk *chunk, const struct RawTransaction_callbacks *cb, mol_num_t size);

struct Transaction_state;
struct Transaction_callbacks;
typedef const struct Transaction_callbacks Transaction_cb;
MOLECULE_API_DECORATOR  void            MolReader_Transaction_init_state                (void* stack_end, struct Transaction_state *s, const struct Transaction_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Transaction_parse                     (void* stack_end, struct Transaction_state *s, struct mol_chunk *chunk, const struct Transaction_callbacks *cb, mol_num_t size);

struct RawHeader_state;
struct RawHeader_callbacks;
typedef const struct RawHeader_callbacks RawHeader_cb;
MOLECULE_API_DECORATOR  void            MolReader_RawHeader_init_state                  (void* stack_end, struct RawHeader_state *s, const struct RawHeader_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_RawHeader_parse                       (void* stack_end, struct RawHeader_state *s, struct mol_chunk *chunk, const struct RawHeader_callbacks *cb, mol_num_t size);

struct Header_state;
struct Header_callbacks;
typedef const struct Header_callbacks Header_cb;
MOLECULE_API_DECORATOR  void            MolReader_Header_init_state                     (void* stack_end, struct Header_state *s, const struct Header_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Header_parse                          (void* stack_end, struct Header_state *s, struct mol_chunk *chunk, const struct Header_callbacks *cb, mol_num_t size);

struct UncleBlock_state;
struct UncleBlock_callbacks;
typedef const struct UncleBlock_callbacks UncleBlock_cb;
MOLECULE_API_DECORATOR  void            MolReader_UncleBlock_init_state                 (void* stack_end, struct UncleBlock_state *s, const struct UncleBlock_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_UncleBlock_parse                      (void* stack_end, struct UncleBlock_state *s, struct mol_chunk *chunk, const struct UncleBlock_callbacks *cb, mol_num_t size);

struct Block_state;
struct Block_callbacks;
typedef const struct Block_callbacks Block_cb;
MOLECULE_API_DECORATOR  void            MolReader_Block_init_state                      (void* stack_end, struct Block_state *s, const struct Block_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_Block_parse                           (void* stack_end, struct Block_state *s, struct mol_chunk *chunk, const struct Block_callbacks *cb, mol_num_t size);

struct CellbaseWitness_state;
struct CellbaseWitness_callbacks;
typedef const struct CellbaseWitness_callbacks CellbaseWitness_cb;
MOLECULE_API_DECORATOR  void            MolReader_CellbaseWitness_init_state            (void* stack_end, struct CellbaseWitness_state *s, const struct CellbaseWitness_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_CellbaseWitness_parse                 (void* stack_end, struct CellbaseWitness_state *s, struct mol_chunk *chunk, const struct CellbaseWitness_callbacks *cb, mol_num_t size);

struct WitnessArgs_state;
struct WitnessArgs_callbacks;
typedef const struct WitnessArgs_callbacks WitnessArgs_cb;
MOLECULE_API_DECORATOR  void            MolReader_WitnessArgs_init_state                (void* stack_end, struct WitnessArgs_state *s, const struct WitnessArgs_callbacks *cb);
MOLECULE_API_DECORATOR  mol_rv          MolReader_WitnessArgs_parse                     (void* stack_end, struct WitnessArgs_state *s, struct mol_chunk *chunk, const struct WitnessArgs_callbacks *cb, mol_num_t size);


#undef ____

/*
 * Reader Functions
 */

struct Uint32_state { struct bytes_state state; };
struct Uint32_callbacks { struct bytes_callbacks cb; };
#define                                 MolReader_Uint32_init_state(st, g, cbs)         mol_bytes_init_state(&(g->state), &((cbs)->cb))
#define                                 MolReader_Uint32_parse(st, g, c, cbs, sz)       mol_parse_bytes(&(g->state), c, &((cbs)->cb), 4)
struct Uint64_state { struct bytes_state state; };
struct Uint64_callbacks { struct bytes_callbacks cb; };
#define                                 MolReader_Uint64_init_state(st, g, cbs)         mol_bytes_init_state(&(g->state), &((cbs)->cb))
#define                                 MolReader_Uint64_parse(st, g, c, cbs, sz)       mol_parse_bytes(&(g->state), c, &((cbs)->cb), 8)
struct Uint128_state { struct bytes_state state; };
struct Uint128_callbacks { struct bytes_callbacks cb; };
#define                                 MolReader_Uint128_init_state(st, g, cbs)        mol_bytes_init_state(&(g->state), &((cbs)->cb))
#define                                 MolReader_Uint128_parse(st, g, c, cbs, sz)      mol_parse_bytes(&(g->state), c, &((cbs)->cb), 16)
struct Byte32_state { struct bytes_state state; };
struct Byte32_callbacks { struct bytes_callbacks cb; };
#define                                 MolReader_Byte32_init_state(st, g, cbs)         mol_bytes_init_state(&(g->state), &((cbs)->cb))
#define                                 MolReader_Byte32_parse(st, g, c, cbs, sz)       mol_parse_bytes(&(g->state), c, &((cbs)->cb), 32)
struct Uint256_state { struct bytes_state state; };
struct Uint256_callbacks { struct bytes_callbacks cb; };
#define                                 MolReader_Uint256_init_state(st, g, cbs)        mol_bytes_init_state(&(g->state), &((cbs)->cb))
#define                                 MolReader_Uint256_parse(st, g, c, cbs, sz)      mol_parse_bytes(&(g->state), c, &((cbs)->cb), 32)
struct Bytes_state { mol_num_t state_num; mol_num_t length; };
struct Bytes_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*body_chunk)(uint8_t*, mol_num_t);
};

MOLECULE_API_DECORATOR  void            MolReader_Bytes_init_state                      (void* stack_end, struct Bytes_state *s, const struct Bytes_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_NUM();
}
MOLECULE_API_DECORATOR  mol_rv          MolReader_Bytes_parse                           (void* stack_end, struct Bytes_state *s, struct mol_chunk *chunk, const struct Bytes_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    if(s->state_num == 0) {
        MOL_CALL_NUM(s->length);
        s->state_num++;
        if(size != MOL_NUM_MAX && (s->length * 1 + 4) != size) return REJECT;
        if(cb && cb->size) MOL_PIC(cb->size)(s->length * 1 + 4);
    }
    mol_num_t needed=s->length+1-s->state_num;
    mol_num_t available=chunk->length-chunk->consumed;
    mol_num_t copy=needed<available?needed:available;
    if(needed && cb && cb->body_chunk) MOL_PIC(cb->body_chunk)(chunk->ptr + chunk->consumed, copy);
    chunk->consumed+=copy;
    s->state_num+=copy;
    if(s->state_num-1 < s->length) return INCOMPLETE;
    DONE();
}
struct BytesOpt_state { };
struct BytesOpt_callbacks {
    void (*start)();
    void (*end)();
    void (*chunk)(uint8_t*, mol_num_t);
    const struct Bytes_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_BytesOpt_init_state                   (void* stack_end, struct BytesOpt_state *s, const struct BytesOpt_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    MOL_INIT_SUBPARSER(item, Bytes);
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_BytesOpt_parse                        (void* stack_end, struct BytesOpt_state *s, struct mol_chunk *chunk, const struct BytesOpt_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Option
    if(size==0) {
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
    }
    MOL_CALL_SUBPARSER(item, Bytes, size)
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct BytesVec_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t first_offset;
};
struct BytesVec_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*length)(mol_num_t);
    void (*index)(mol_num_t);
    void (*offset)(mol_num_t);
    const struct Bytes_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_BytesVec_init_state                   (void* stack_end, struct BytesVec_state *s, const struct BytesVec_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_BytesVec_parse                        (void* stack_end, struct BytesVec_state *s, struct mol_chunk *chunk, const struct BytesVec_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // DynVec
    (void)(size); // FIXME: check sizes.
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(cb && cb->size) MOL_PIC(cb->size)(s->total_size);
            if(s->total_size==4) {
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
            }
            if(size != MOL_NUM_MAX && size != s->total_size) return REJECT;
            s->state_num++;
        case 1:
            MOL_CALL_NUM(s->first_offset);
            MOL_INIT_NUM();
            s->field_idx=1;
            s->state_num++;
        case 2:
            while(s->field_idx < (s->first_offset>>2)-1) {
                mol_num_t scratch;
                MOL_CALL_NUM(scratch);
                MOL_INIT_NUM();
                s->field_idx++;
            }
            MOL_INIT_SUBPARSER(item, Bytes)
            s->field_idx=0;
            s->state_num++;
            if(cb && cb->length) MOL_PIC(cb->length)((s->first_offset>>2)-1);
            if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
        case 3:
            while(s->field_idx < (s->first_offset>>2)-1) {
                MOL_CALL_SUBPARSER(item, Bytes, -1)
                MOL_INIT_SUBPARSER(item, Bytes)
                s->field_idx++;
                if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
            }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct Byte32Vec_state { mol_num_t state_num; mol_num_t length; };
struct Byte32Vec_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*index)(mol_num_t);
    const struct Byte32_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_Byte32Vec_init_state                  (void* stack_end, struct Byte32Vec_state *s, const struct Byte32Vec_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_NUM();
}
MOLECULE_API_DECORATOR  mol_rv          MolReader_Byte32Vec_parse                       (void* stack_end, struct Byte32Vec_state *s, struct mol_chunk *chunk, const struct Byte32Vec_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    if(s->state_num == 0) {
        MOL_CALL_NUM(s->length);
        s->state_num++;
        if(size != MOL_NUM_MAX && (s->length * 32 + 4) != size) return REJECT;
        if(cb && cb->size) MOL_PIC(cb->size)(s->length * 32 + 4);
        MOL_INIT_SUBPARSER(item, Byte32);
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    while(s->state_num-1 < s->length) {
        MOL_CALL_SUBPARSER(item, Byte32, 32);
        MOL_INIT_SUBPARSER(item, Byte32);
        s->state_num++;
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    DONE();
}
struct ScriptOpt_state { };
struct ScriptOpt_callbacks {
    void (*start)();
    void (*end)();
    void (*chunk)(uint8_t*, mol_num_t);
    const struct Script_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_ScriptOpt_init_state                  (void* stack_end, struct ScriptOpt_state *s, const struct ScriptOpt_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    MOL_INIT_SUBPARSER(item, Script);
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_ScriptOpt_parse                       (void* stack_end, struct ScriptOpt_state *s, struct mol_chunk *chunk, const struct ScriptOpt_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Option
    if(size==0) {
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
    }
    MOL_CALL_SUBPARSER(item, Script, size)
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct ProposalShortId_state { struct bytes_state state; };
struct ProposalShortId_callbacks { struct bytes_callbacks cb; };
#define                                 MolReader_ProposalShortId_init_state(st, g, cbs) mol_bytes_init_state(&(g->state), &((cbs)->cb))
#define                                 MolReader_ProposalShortId_parse(st, g, c, cbs, sz) mol_parse_bytes(&(g->state), c, &((cbs)->cb), 10)
struct UncleBlockVec_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t first_offset;
};
struct UncleBlockVec_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*length)(mol_num_t);
    void (*index)(mol_num_t);
    void (*offset)(mol_num_t);
    const struct UncleBlock_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_UncleBlockVec_init_state              (void* stack_end, struct UncleBlockVec_state *s, const struct UncleBlockVec_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_UncleBlockVec_parse                   (void* stack_end, struct UncleBlockVec_state *s, struct mol_chunk *chunk, const struct UncleBlockVec_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // DynVec
    (void)(size); // FIXME: check sizes.
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(cb && cb->size) MOL_PIC(cb->size)(s->total_size);
            if(s->total_size==4) {
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
            }
            if(size != MOL_NUM_MAX && size != s->total_size) return REJECT;
            s->state_num++;
        case 1:
            MOL_CALL_NUM(s->first_offset);
            MOL_INIT_NUM();
            s->field_idx=1;
            s->state_num++;
        case 2:
            while(s->field_idx < (s->first_offset>>2)-1) {
                mol_num_t scratch;
                MOL_CALL_NUM(scratch);
                MOL_INIT_NUM();
                s->field_idx++;
            }
            MOL_INIT_SUBPARSER(item, UncleBlock)
            s->field_idx=0;
            s->state_num++;
            if(cb && cb->length) MOL_PIC(cb->length)((s->first_offset>>2)-1);
            if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
        case 3:
            while(s->field_idx < (s->first_offset>>2)-1) {
                MOL_CALL_SUBPARSER(item, UncleBlock, -1)
                MOL_INIT_SUBPARSER(item, UncleBlock)
                s->field_idx++;
                if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
            }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct TransactionVec_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t first_offset;
};
struct TransactionVec_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*length)(mol_num_t);
    void (*index)(mol_num_t);
    void (*offset)(mol_num_t);
    const struct Transaction_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_TransactionVec_init_state             (void* stack_end, struct TransactionVec_state *s, const struct TransactionVec_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_TransactionVec_parse                  (void* stack_end, struct TransactionVec_state *s, struct mol_chunk *chunk, const struct TransactionVec_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // DynVec
    (void)(size); // FIXME: check sizes.
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(cb && cb->size) MOL_PIC(cb->size)(s->total_size);
            if(s->total_size==4) {
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
            }
            if(size != MOL_NUM_MAX && size != s->total_size) return REJECT;
            s->state_num++;
        case 1:
            MOL_CALL_NUM(s->first_offset);
            MOL_INIT_NUM();
            s->field_idx=1;
            s->state_num++;
        case 2:
            while(s->field_idx < (s->first_offset>>2)-1) {
                mol_num_t scratch;
                MOL_CALL_NUM(scratch);
                MOL_INIT_NUM();
                s->field_idx++;
            }
            MOL_INIT_SUBPARSER(item, Transaction)
            s->field_idx=0;
            s->state_num++;
            if(cb && cb->length) MOL_PIC(cb->length)((s->first_offset>>2)-1);
            if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
        case 3:
            while(s->field_idx < (s->first_offset>>2)-1) {
                MOL_CALL_SUBPARSER(item, Transaction, -1)
                MOL_INIT_SUBPARSER(item, Transaction)
                s->field_idx++;
                if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
            }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct ProposalShortIdVec_state { mol_num_t state_num; mol_num_t length; };
struct ProposalShortIdVec_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*index)(mol_num_t);
    const struct ProposalShortId_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_ProposalShortIdVec_init_state         (void* stack_end, struct ProposalShortIdVec_state *s, const struct ProposalShortIdVec_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_NUM();
}
MOLECULE_API_DECORATOR  mol_rv          MolReader_ProposalShortIdVec_parse              (void* stack_end, struct ProposalShortIdVec_state *s, struct mol_chunk *chunk, const struct ProposalShortIdVec_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    if(s->state_num == 0) {
        MOL_CALL_NUM(s->length);
        s->state_num++;
        if(size != MOL_NUM_MAX && (s->length * 10 + 4) != size) return REJECT;
        if(cb && cb->size) MOL_PIC(cb->size)(s->length * 10 + 4);
        MOL_INIT_SUBPARSER(item, ProposalShortId);
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    while(s->state_num-1 < s->length) {
        MOL_CALL_SUBPARSER(item, ProposalShortId, 10);
        MOL_INIT_SUBPARSER(item, ProposalShortId);
        s->state_num++;
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    DONE();
}
struct CellDepVec_state { mol_num_t state_num; mol_num_t length; };
struct CellDepVec_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*index)(mol_num_t);
    const struct CellDep_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_CellDepVec_init_state                 (void* stack_end, struct CellDepVec_state *s, const struct CellDepVec_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_NUM();
}
MOLECULE_API_DECORATOR  mol_rv          MolReader_CellDepVec_parse                      (void* stack_end, struct CellDepVec_state *s, struct mol_chunk *chunk, const struct CellDepVec_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    if(s->state_num == 0) {
        MOL_CALL_NUM(s->length);
        s->state_num++;
        if(size != MOL_NUM_MAX && (s->length * 37 + 4) != size) return REJECT;
        if(cb && cb->size) MOL_PIC(cb->size)(s->length * 37 + 4);
        MOL_INIT_SUBPARSER(item, CellDep);
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    while(s->state_num-1 < s->length) {
        MOL_CALL_SUBPARSER(item, CellDep, 37);
        MOL_INIT_SUBPARSER(item, CellDep);
        s->state_num++;
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    DONE();
}
struct CellInputVec_state { mol_num_t state_num; mol_num_t length; };
struct CellInputVec_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*index)(mol_num_t);
    const struct CellInput_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_CellInputVec_init_state               (void* stack_end, struct CellInputVec_state *s, const struct CellInputVec_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_NUM();
}
MOLECULE_API_DECORATOR  mol_rv          MolReader_CellInputVec_parse                    (void* stack_end, struct CellInputVec_state *s, struct mol_chunk *chunk, const struct CellInputVec_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    if(s->state_num == 0) {
        MOL_CALL_NUM(s->length);
        s->state_num++;
        if(size != MOL_NUM_MAX && (s->length * 44 + 4) != size) return REJECT;
        if(cb && cb->size) MOL_PIC(cb->size)(s->length * 44 + 4);
        MOL_INIT_SUBPARSER(item, CellInput);
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    while(s->state_num-1 < s->length) {
        MOL_CALL_SUBPARSER(item, CellInput, 44);
        MOL_INIT_SUBPARSER(item, CellInput);
        s->state_num++;
        if(cb && cb->index) MOL_PIC(cb->index)(s->state_num-1);
    }
    DONE();
}
struct CellOutputVec_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t first_offset;
};
struct CellOutputVec_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*size)(mol_num_t);
    void (*length)(mol_num_t);
    void (*index)(mol_num_t);
    void (*offset)(mol_num_t);
    const struct CellOutput_callbacks *item;
};

MOLECULE_API_DECORATOR  void            MolReader_CellOutputVec_init_state              (void* stack_end, struct CellOutputVec_state *s, const struct CellOutputVec_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_CellOutputVec_parse                   (void* stack_end, struct CellOutputVec_state *s, struct mol_chunk *chunk, const struct CellOutputVec_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // DynVec
    (void)(size); // FIXME: check sizes.
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(cb && cb->size) MOL_PIC(cb->size)(s->total_size);
            if(s->total_size==4) {
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
            }
            if(size != MOL_NUM_MAX && size != s->total_size) return REJECT;
            s->state_num++;
        case 1:
            MOL_CALL_NUM(s->first_offset);
            MOL_INIT_NUM();
            s->field_idx=1;
            s->state_num++;
        case 2:
            while(s->field_idx < (s->first_offset>>2)-1) {
                mol_num_t scratch;
                MOL_CALL_NUM(scratch);
                MOL_INIT_NUM();
                s->field_idx++;
            }
            MOL_INIT_SUBPARSER(item, CellOutput)
            s->field_idx=0;
            s->state_num++;
            if(cb && cb->length) MOL_PIC(cb->length)((s->first_offset>>2)-1);
            if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
        case 3:
            while(s->field_idx < (s->first_offset>>2)-1) {
                MOL_CALL_SUBPARSER(item, CellOutput, -1)
                MOL_INIT_SUBPARSER(item, CellOutput)
                s->field_idx++;
                if(cb && cb->index) MOL_PIC(cb->index)(s->field_idx);
            }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct Script_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t code_hash_offset;
    mol_num_t hash_type_offset;
    mol_num_t args_offset;
};
struct Script_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct Script_state*);
    const struct Byte32_callbacks *code_hash;
    const struct byte_callbacks *hash_type;
    const struct Bytes_callbacks *args;
};

MOLECULE_API_DECORATOR  void            MolReader_Script_init_state                     (void* stack_end, struct Script_state *s, const struct Script_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_Script_parse                          (void* stack_end, struct Script_state *s, struct mol_chunk *chunk, const struct Script_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->code_hash_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->hash_type_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 2: {
                    MOL_CALL_NUM(s->args_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(code_hash, Byte32);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(code_hash, Byte32, s->hash_type_offset - s->code_hash_offset);
                MOL_INIT_SUBPARSER(hash_type, byte);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(hash_type, byte, s->args_offset - s->hash_type_offset);
                MOL_INIT_SUBPARSER(args, Bytes);
                s->field_idx++;
            }
            case 2: {
                MOL_CALL_SUBPARSER(args, Bytes, s->total_size-s->args_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct OutPoint_state { mol_num_t state_num; };
struct OutPoint_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    const struct Byte32_callbacks *tx_hash;
    const struct Uint32_callbacks *index;
};

MOLECULE_API_DECORATOR  void            MolReader_OutPoint_init_state                   (void* stack_end, struct OutPoint_state *s, const struct OutPoint_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_SUBPARSER(tx_hash, Byte32);
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_OutPoint_parse                        (void* stack_end, struct OutPoint_state *s, struct mol_chunk *chunk, const struct OutPoint_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Struct
    if(size != 36 && size != MOL_NUM_MAX) return REJECT;
    switch(s->state_num) {
        case 0: {
            MOL_CALL_SUBPARSER(tx_hash, Byte32, 32)
            s->state_num++;
            MOL_INIT_SUBPARSER(index, Uint32)
        }
        case 1: {
            MOL_CALL_SUBPARSER(index, Uint32, 4)
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}

struct CellInput_state { mol_num_t state_num; };
struct CellInput_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    const struct Uint64_callbacks *since;
    const struct OutPoint_callbacks *previous_output;
};

MOLECULE_API_DECORATOR  void            MolReader_CellInput_init_state                  (void* stack_end, struct CellInput_state *s, const struct CellInput_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_SUBPARSER(since, Uint64);
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_CellInput_parse                       (void* stack_end, struct CellInput_state *s, struct mol_chunk *chunk, const struct CellInput_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Struct
    if(size != 44 && size != MOL_NUM_MAX) return REJECT;
    switch(s->state_num) {
        case 0: {
            MOL_CALL_SUBPARSER(since, Uint64, 8)
            s->state_num++;
            MOL_INIT_SUBPARSER(previous_output, OutPoint)
        }
        case 1: {
            MOL_CALL_SUBPARSER(previous_output, OutPoint, 36)
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}

struct CellOutput_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t capacity_offset;
    mol_num_t lock_offset;
    mol_num_t type__offset;
};
struct CellOutput_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct CellOutput_state*);
    const struct Uint64_callbacks *capacity;
    const struct Script_callbacks *lock;
    const struct ScriptOpt_callbacks *type_;
};

MOLECULE_API_DECORATOR  void            MolReader_CellOutput_init_state                 (void* stack_end, struct CellOutput_state *s, const struct CellOutput_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_CellOutput_parse                      (void* stack_end, struct CellOutput_state *s, struct mol_chunk *chunk, const struct CellOutput_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->capacity_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->lock_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 2: {
                    MOL_CALL_NUM(s->type__offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(capacity, Uint64);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(capacity, Uint64, s->lock_offset - s->capacity_offset);
                MOL_INIT_SUBPARSER(lock, Script);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(lock, Script, s->type__offset - s->lock_offset);
                MOL_INIT_SUBPARSER(type_, ScriptOpt);
                s->field_idx++;
            }
            case 2: {
                MOL_CALL_SUBPARSER(type_, ScriptOpt, s->total_size-s->type__offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct CellDep_state { mol_num_t state_num; };
struct CellDep_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    const struct OutPoint_callbacks *out_point;
    const struct byte_callbacks *dep_type;
};

MOLECULE_API_DECORATOR  void            MolReader_CellDep_init_state                    (void* stack_end, struct CellDep_state *s, const struct CellDep_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_SUBPARSER(out_point, OutPoint);
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_CellDep_parse                         (void* stack_end, struct CellDep_state *s, struct mol_chunk *chunk, const struct CellDep_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Struct
    if(size != 37 && size != MOL_NUM_MAX) return REJECT;
    switch(s->state_num) {
        case 0: {
            MOL_CALL_SUBPARSER(out_point, OutPoint, 36)
            s->state_num++;
            MOL_INIT_SUBPARSER(dep_type, byte)
        }
        case 1: {
            MOL_CALL_SUBPARSER(dep_type, byte, 1)
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}

struct RawTransaction_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t version_offset;
    mol_num_t cell_deps_offset;
    mol_num_t header_deps_offset;
    mol_num_t inputs_offset;
    mol_num_t outputs_offset;
    mol_num_t outputs_data_offset;
};
struct RawTransaction_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct RawTransaction_state*);
    const struct Uint32_callbacks *version;
    const struct CellDepVec_callbacks *cell_deps;
    const struct Byte32Vec_callbacks *header_deps;
    const struct CellInputVec_callbacks *inputs;
    const struct CellOutputVec_callbacks *outputs;
    const struct BytesVec_callbacks *outputs_data;
};

MOLECULE_API_DECORATOR  void            MolReader_RawTransaction_init_state             (void* stack_end, struct RawTransaction_state *s, const struct RawTransaction_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_RawTransaction_parse                  (void* stack_end, struct RawTransaction_state *s, struct mol_chunk *chunk, const struct RawTransaction_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->version_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->cell_deps_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 2: {
                    MOL_CALL_NUM(s->header_deps_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 3: {
                    MOL_CALL_NUM(s->inputs_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 4: {
                    MOL_CALL_NUM(s->outputs_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 5: {
                    MOL_CALL_NUM(s->outputs_data_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(version, Uint32);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(version, Uint32, s->cell_deps_offset - s->version_offset);
                MOL_INIT_SUBPARSER(cell_deps, CellDepVec);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(cell_deps, CellDepVec, s->header_deps_offset - s->cell_deps_offset);
                MOL_INIT_SUBPARSER(header_deps, Byte32Vec);
                s->field_idx++;
            }
            case 2: {
                MOL_CALL_SUBPARSER(header_deps, Byte32Vec, s->inputs_offset - s->header_deps_offset);
                MOL_INIT_SUBPARSER(inputs, CellInputVec);
                s->field_idx++;
            }
            case 3: {
                MOL_CALL_SUBPARSER(inputs, CellInputVec, s->outputs_offset - s->inputs_offset);
                MOL_INIT_SUBPARSER(outputs, CellOutputVec);
                s->field_idx++;
            }
            case 4: {
                MOL_CALL_SUBPARSER(outputs, CellOutputVec, s->outputs_data_offset - s->outputs_offset);
                MOL_INIT_SUBPARSER(outputs_data, BytesVec);
                s->field_idx++;
            }
            case 5: {
                MOL_CALL_SUBPARSER(outputs_data, BytesVec, s->total_size-s->outputs_data_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct Transaction_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t raw_offset;
    mol_num_t witnesses_offset;
};
struct Transaction_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct Transaction_state*);
    const struct RawTransaction_callbacks *raw;
    const struct BytesVec_callbacks *witnesses;
};

MOLECULE_API_DECORATOR  void            MolReader_Transaction_init_state                (void* stack_end, struct Transaction_state *s, const struct Transaction_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_Transaction_parse                     (void* stack_end, struct Transaction_state *s, struct mol_chunk *chunk, const struct Transaction_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->raw_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->witnesses_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(raw, RawTransaction);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(raw, RawTransaction, s->witnesses_offset - s->raw_offset);
                MOL_INIT_SUBPARSER(witnesses, BytesVec);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(witnesses, BytesVec, s->total_size-s->witnesses_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct RawHeader_state { mol_num_t state_num; };
struct RawHeader_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    const struct Uint32_callbacks *version;
    const struct Uint32_callbacks *compact_target;
    const struct Uint64_callbacks *timestamp;
    const struct Uint64_callbacks *number;
    const struct Uint64_callbacks *epoch;
    const struct Byte32_callbacks *parent_hash;
    const struct Byte32_callbacks *transactions_root;
    const struct Byte32_callbacks *proposals_hash;
    const struct Byte32_callbacks *uncles_hash;
    const struct Byte32_callbacks *dao;
};

MOLECULE_API_DECORATOR  void            MolReader_RawHeader_init_state                  (void* stack_end, struct RawHeader_state *s, const struct RawHeader_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_SUBPARSER(version, Uint32);
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_RawHeader_parse                       (void* stack_end, struct RawHeader_state *s, struct mol_chunk *chunk, const struct RawHeader_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Struct
    if(size != 192 && size != MOL_NUM_MAX) return REJECT;
    switch(s->state_num) {
        case 0: {
            MOL_CALL_SUBPARSER(version, Uint32, 4)
            s->state_num++;
            MOL_INIT_SUBPARSER(compact_target, Uint32)
        }
        case 1: {
            MOL_CALL_SUBPARSER(compact_target, Uint32, 4)
            s->state_num++;
            MOL_INIT_SUBPARSER(timestamp, Uint64)
        }
        case 2: {
            MOL_CALL_SUBPARSER(timestamp, Uint64, 8)
            s->state_num++;
            MOL_INIT_SUBPARSER(number, Uint64)
        }
        case 3: {
            MOL_CALL_SUBPARSER(number, Uint64, 8)
            s->state_num++;
            MOL_INIT_SUBPARSER(epoch, Uint64)
        }
        case 4: {
            MOL_CALL_SUBPARSER(epoch, Uint64, 8)
            s->state_num++;
            MOL_INIT_SUBPARSER(parent_hash, Byte32)
        }
        case 5: {
            MOL_CALL_SUBPARSER(parent_hash, Byte32, 32)
            s->state_num++;
            MOL_INIT_SUBPARSER(transactions_root, Byte32)
        }
        case 6: {
            MOL_CALL_SUBPARSER(transactions_root, Byte32, 32)
            s->state_num++;
            MOL_INIT_SUBPARSER(proposals_hash, Byte32)
        }
        case 7: {
            MOL_CALL_SUBPARSER(proposals_hash, Byte32, 32)
            s->state_num++;
            MOL_INIT_SUBPARSER(uncles_hash, Byte32)
        }
        case 8: {
            MOL_CALL_SUBPARSER(uncles_hash, Byte32, 32)
            s->state_num++;
            MOL_INIT_SUBPARSER(dao, Byte32)
        }
        case 9: {
            MOL_CALL_SUBPARSER(dao, Byte32, 32)
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}

struct Header_state { mol_num_t state_num; };
struct Header_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    const struct RawHeader_callbacks *raw;
    const struct Uint128_callbacks *nonce;
};

MOLECULE_API_DECORATOR  void            MolReader_Header_init_state                     (void* stack_end, struct Header_state *s, const struct Header_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    MOL_INIT_SUBPARSER(raw, RawHeader);
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_Header_parse                          (void* stack_end, struct Header_state *s, struct mol_chunk *chunk, const struct Header_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Struct
    if(size != 208 && size != MOL_NUM_MAX) return REJECT;
    switch(s->state_num) {
        case 0: {
            MOL_CALL_SUBPARSER(raw, RawHeader, 192)
            s->state_num++;
            MOL_INIT_SUBPARSER(nonce, Uint128)
        }
        case 1: {
            MOL_CALL_SUBPARSER(nonce, Uint128, 16)
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}

struct UncleBlock_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t header_offset;
    mol_num_t proposals_offset;
};
struct UncleBlock_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct UncleBlock_state*);
    const struct Header_callbacks *header;
    const struct ProposalShortIdVec_callbacks *proposals;
};

MOLECULE_API_DECORATOR  void            MolReader_UncleBlock_init_state                 (void* stack_end, struct UncleBlock_state *s, const struct UncleBlock_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_UncleBlock_parse                      (void* stack_end, struct UncleBlock_state *s, struct mol_chunk *chunk, const struct UncleBlock_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->header_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->proposals_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(header, Header);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(header, Header, s->proposals_offset - s->header_offset);
                MOL_INIT_SUBPARSER(proposals, ProposalShortIdVec);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(proposals, ProposalShortIdVec, s->total_size-s->proposals_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct Block_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t header_offset;
    mol_num_t uncles_offset;
    mol_num_t transactions_offset;
    mol_num_t proposals_offset;
};
struct Block_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct Block_state*);
    const struct Header_callbacks *header;
    const struct UncleBlockVec_callbacks *uncles;
    const struct TransactionVec_callbacks *transactions;
    const struct ProposalShortIdVec_callbacks *proposals;
};

MOLECULE_API_DECORATOR  void            MolReader_Block_init_state                      (void* stack_end, struct Block_state *s, const struct Block_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_Block_parse                           (void* stack_end, struct Block_state *s, struct mol_chunk *chunk, const struct Block_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->header_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->uncles_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 2: {
                    MOL_CALL_NUM(s->transactions_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 3: {
                    MOL_CALL_NUM(s->proposals_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(header, Header);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(header, Header, s->uncles_offset - s->header_offset);
                MOL_INIT_SUBPARSER(uncles, UncleBlockVec);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(uncles, UncleBlockVec, s->transactions_offset - s->uncles_offset);
                MOL_INIT_SUBPARSER(transactions, TransactionVec);
                s->field_idx++;
            }
            case 2: {
                MOL_CALL_SUBPARSER(transactions, TransactionVec, s->proposals_offset - s->transactions_offset);
                MOL_INIT_SUBPARSER(proposals, ProposalShortIdVec);
                s->field_idx++;
            }
            case 3: {
                MOL_CALL_SUBPARSER(proposals, ProposalShortIdVec, s->total_size-s->proposals_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct CellbaseWitness_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t lock_offset;
    mol_num_t message_offset;
};
struct CellbaseWitness_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct CellbaseWitness_state*, uint8_t*);
    const struct Script_callbacks *lock;
    const struct Bytes_callbacks *message;
};

MOLECULE_API_DECORATOR  void            MolReader_CellbaseWitness_init_state            (void* stack_end, struct CellbaseWitness_state *s, const struct CellbaseWitness_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_CellbaseWitness_parse                 (void* stack_end, struct CellbaseWitness_state *s, struct mol_chunk *chunk, const struct CellbaseWitness_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->lock_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->message_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(lock, Script);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(lock, Script, s->message_offset - s->lock_offset);
                MOL_INIT_SUBPARSER(message, Bytes);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(message, Bytes, s->total_size-s->message_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}
struct WitnessArgs_state {
    mol_num_t state_num;
    mol_num_t field_idx;
    mol_num_t total_size;
    mol_num_t lock_offset;
    mol_num_t input_type_offset;
    mol_num_t output_type_offset;
};
struct WitnessArgs_callbacks {
    void (*start)();
    void (*chunk)(uint8_t*, mol_num_t);
    void (*end)();
    void (*offsets)(struct WitnessArgs_state*);
    const struct BytesOpt_callbacks *lock;
    const struct BytesOpt_callbacks *input_type;
    const struct BytesOpt_callbacks *output_type;
};

MOLECULE_API_DECORATOR  void            MolReader_WitnessArgs_init_state                (void* stack_end, struct WitnessArgs_state *s, const struct WitnessArgs_callbacks *cb) {
    if(cb && cb->start) MOL_PIC(cb->start)();
    s->state_num=0;
    s->field_idx=0;
    MOL_INIT_NUM();
}

MOLECULE_API_DECORATOR  mol_rv          MolReader_WitnessArgs_parse                     (void* stack_end, struct WitnessArgs_state *s, struct mol_chunk *chunk, const struct WitnessArgs_callbacks *cb, mol_num_t size) {
    mol_num_t start_idx = chunk->consumed;
    // Table
    switch(s->state_num) {
        case 0:
            MOL_CALL_NUM(s->total_size);
            MOL_INIT_NUM();
            if(size!=MOL_NUM_MAX && s->total_size != size) return REJECT;
            s->state_num++;
        case 1:
            switch(s->field_idx) {
                case 0: {
                    MOL_CALL_NUM(s->lock_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 1: {
                    MOL_CALL_NUM(s->input_type_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
                case 2: {
                    MOL_CALL_NUM(s->output_type_offset);
                    MOL_INIT_NUM();
                    s->field_idx++;
                }
            }
            s->state_num++;
            s->field_idx=0;
            MOL_INIT_SUBPARSER(lock, BytesOpt);
            if(cb && cb->offsets) MOL_PIC(cb->offsets)(s, chunk->ptr + chunk->consumed);
        case 2:
            switch(s->field_idx) {
            case 0: {
                MOL_CALL_SUBPARSER(lock, BytesOpt, s->input_type_offset - s->lock_offset);
                MOL_INIT_SUBPARSER(input_type, BytesOpt);
                s->field_idx++;
            }
            case 1: {
                MOL_CALL_SUBPARSER(input_type, BytesOpt, s->output_type_offset - s->input_type_offset);
                MOL_INIT_SUBPARSER(output_type, BytesOpt);
                s->field_idx++;
            }
            case 2: {
                MOL_CALL_SUBPARSER(output_type, BytesOpt, s->total_size-s->output_type_offset);
                s->state_num++;
            }
        }
    }
    if(cb && cb->chunk) MOL_PIC(cb->chunk)(chunk->ptr + start_idx, chunk->consumed - start_idx);
    if(cb && cb->end) MOL_PIC(cb->end)();
    return COMPLETE;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_BLOCKCHAIN
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_BLOCKCHAIN
#endif /* __DEFINE_MOLECULE_API_DECORATOR_BLOCKCHAIN */

#ifdef __cplusplus
_CPP_END
#undef _CPP_BEGIN
#undef _CPP_END
#endif /* __cplusplus */

#endif /* BLOCKCHAIN_H */
